name: Build, Push and Deploy

on:
  push:
    branches: ['main']
    paths:
      - 'tasky/**'
      - '.github/workflows/build-and-publish.yml'
  workflow_dispatch:  # Allow manual trigger

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GKE_CLUSTER: demo    # GKE cluster name from Terraform
  GKE_ZONE: us-central1-a    # GKE cluster zone from Terraform

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write    # Required for GCP Workload Identity Federation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          # The value should be the output of github_actions_sa_key from Terraform
          # Run: terraform output -raw github_actions_sa_key
          # This secret is set by Terraform using the GitHub CLI in 16-github-secrets.tf
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          token_format: 'access_token'

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: Restart deployment
        run: |
          kubectl rollout restart deployment/tasky
          kubectl rollout status deployment/tasky
          echo "Deployment restarted successfully with new image: ${{ steps.meta.outputs.tags }}"
          echo "Deployment timestamp: $(date -u)"
          echo "::set-output name=deploy_time::$(date -u)"